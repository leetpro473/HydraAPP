generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id
  name        String   @db.Char(30)
  username    String   @unique @db.Char(64)
  email       String   @unique
  imageUrl    String
  bannerUrl   String?
  location    String?  @db.Char(30)
  website     String?  @db.Char(100)
  isCompleted Boolean  @default(false)
  bio         String?  @db.Char(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  threads       Thread[]
  followers     Follower[]     @relation("UserFollowers")
  followings    Follower[]     @relation("UserFollowing")
  likes         Like[]
  bookmarks     Bookmark[]
  notifications Notification[]
}

model Follower {
  followerId  String @unique
  followingId String @unique

  user      User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(uuid())
  userId      String?
  title       String   @db.Char(50)
  description String   @db.Char(100)
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Thread {
  id        String     @id @default(uuid())
  text      String     @db.Char(255)
  parentId  String?
  userId    String
  imageUrl  String?
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Thread?    @relation("RepliesTo", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Thread[]   @relation("RepliesTo")
  likes     Like[]     @relation("PostLikes")
  bookmarks Bookmark[]
}

model Like {
  id       String @id @default(uuid())
  userId   String
  threadId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread   Thread @relation("PostLikes", fields: [threadId], references: [id], onDelete: Cascade)
}

model Bookmark {
  id       String @id @default(uuid())
  userId   String
  threadId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
}
